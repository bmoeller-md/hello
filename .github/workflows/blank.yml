# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [self-hosted]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          # alte Ergebnisse entfernen / aufraeumen
          rmdir /S /Q ${bamboo.component}

          # Verzeichnis erzeugen und dort arbeiten
          mkdir ${bamboo.component}
          cd ${bamboo.component}

          # repository manuell clonen
          git clone https://mcbstest:qs_mcbs_11@stashweb.mobilcom.de/scm/$component.git
          cd ms-gateway
          # Branch holen
          git checkout release

          # develop mergen
          # git merge develop

          # zurueck auf den Server
          # git push

          # letztes Tag ermitteln
          lastTag=`git describe --abbrev=0 --tags`
          echo "Last Tag : $lastTag"

          # hashcode fuer das vorherige release (i.e. lastTag)
          tag=`git show "$lastTag" | grep commit | cut -d ' ' -f 2`
          echo "Tag-Address ($lastTag) : $tag"

          # merges
          git log $tag..HEAD --pretty=format:"%s %an" | grep "Merge" | grep "from" | cut -d '/' -f 3 | grep -Eo '^ABRMS-[0-9]{4}'  | cut -d '-' -f 1,2 | sort | uniq >> a.txt
          git log $tag..HEAD --pretty=format:"%s %an" | grep "Merge" | grep "from" | cut -d '/' -f 3 | grep -Eo '^MCBS-[0-9]{4}'  | cut -d '-' -f 1,2 | sort | uniq >> a.txt
          # commits
          git log $tag..HEAD --pretty=format:"%s %an" | grep "^\[ABRMS*" | cut -d ' ' -f 1 | sed s'/.$//' | sed s'/^.//' | sort | uniq >> a.txt
          git log $tag..HEAD --pretty=format:"%s %an" | grep "^\[MCBS*" | cut -d ' ' -f 1 | sed s'/.$//' | sed s'/^.//' | sort | uniq >> a.txt
          # commits
          git log $tag..HEAD --pretty=format:"%s %an" | grep "^ABRMS*" | cut -d ' ' -f 1 | cut -d ':' -f 1|sort | uniq >> a.txt
          #git log $tag..HEAD --pretty=format:"%s %an" | grep -Eo '^ABRMS-[0-9]{4}' | cut -d ' ' -f 1 | sort | uniq >> a.txt
          git log $tag..HEAD --pretty=format:"%s %an" | grep "^MCBS*" | cut -d ' ' -f 1 | sort | uniq >> a.txt

          # sortieren und ausgeben
          cat a.txt | sort | uniq > ../../branch_issues.txt
        env:
          component: ms-gateway
     
